{"version":3,"file":"ModForm-c61a8902.js","sources":["../../../../../src/lib/models/mods.ts","../../../../../src/lib/components/mods/ModAuthor.svelte","../../../../../src/lib/components/mods/ModForm.svelte"],"sourcesContent":["import * as zod from 'zod';\n\nexport type ModData = {\n  name: string;\n  mod_reference: string;\n  short_description: string;\n  full_description?: string;\n  logo?: string;\n  source_url?: string;\n  authors?: {\n    role: string;\n    user_id: string;\n  }[];\n};\n\nexport const modSchema = zod.object({\n  name: zod.string().min(3).max(32),\n  mod_reference: zod\n    .string()\n    .min(3)\n    .max(32)\n    .regex(/^([a-zA-Z][a-zA-Z0-9_]*)$/)\n    .refine(async () => {\n      // TODO Check if mod reference exists\n      return true;\n    }),\n  short_description: zod.string().min(16).max(128),\n  full_description: zod.optional(zod.string()),\n  logo: zod.optional(zod.any().refine((logo) => 'name' in logo && 'size' in logo && 'type' in logo)),\n  source_url: zod.string().url().optional().or(zod.literal('')),\n  authors: zod.optional(\n    zod\n      .object({\n        role: zod.string(),\n        user_id: zod.string()\n      })\n      .array()\n  )\n});\n","<script lang=\"ts\">\n  import { operationStore, query } from '@urql/svelte';\n  import { GetUserDocument } from '$lib/generated';\n  import { assets } from '$app/paths';\n\n  export let id: string;\n\n  const user = operationStore(GetUserDocument, { user: id });\n\n  $: {\n    $user.variables.user = id;\n    $user.reexecute();\n  }\n\n  query(user);\n</script>\n\n{#if $user.fetching}\n  <p class=\"mr-2\">Loading...</p>\n{:else if $user.error}\n  <p class=\"mr-2\">Oh no... {$user.error.message}</p>\n{:else if $user.data.getUser}\n  <div class=\"grid grid-flow-col auto-cols-max gap-x-2 mr-2\">\n    <div\n      class=\"rounded-full bg-cover w-7 h-7\"\n      style={`background-image: url(\"${$user.data.getUser.avatar || assets + '/images/no_image.png'}\")`}\n    />\n    <div class=\"grid grid-flow-row\">\n      <span class=\"text-yellow-500\">{$user.data.getUser.username}</span>\n    </div>\n  </div>\n{:else}\n  <p class=\"mr-2 whitespace-nowrap\">Unknown User ID</p>\n{/if}\n","<script lang=\"ts\">\n  import { createForm } from 'felte';\n  import { validator } from '@felte/validator-zod';\n  import { svelteReporter, ValidationMessage } from '@felte/reporter-svelte';\n  import type { ModData } from '$lib/models/mods';\n  import { modSchema } from '$lib/models/mods';\n  import { trimNonSchema } from '$lib/utils/forms';\n  import { markdown } from '$lib/utils/markdown';\n  import Textfield from '@smui/textfield';\n  import HelperText from '@smui/textfield/helper-text';\n  import Button, { Label } from '@smui/button';\n  import ModAuthor from '$lib/components/mods/ModAuthor.svelte';\n\n  export let onSubmit: (data: ModData) => void;\n  export let initialValues: ModData = {\n    full_description: '',\n    mod_reference: '',\n    name: '',\n    short_description: '',\n    source_url: ''\n  };\n  export let submitText = 'Create';\n\n  export let editing = false;\n\n  const { form, data } = createForm<ModData>({\n    initialValues: initialValues,\n    extend: [validator, svelteReporter],\n    validateSchema: modSchema,\n    onSubmit: (data) => onSubmit(trimNonSchema(data, modSchema))\n  });\n\n  $: preview = ($data.full_description as string) || '';\n\n  const addAuthor = () => {\n    $data.authors.push({ role: 'editor', user_id: '' });\n    $data.authors = $data.authors;\n  };\n\n  const removeAuthor = (i: number) => {\n    $data.authors.splice(i, 1);\n    $data.authors = $data.authors;\n  };\n</script>\n\n<form use:form>\n  <div class=\"grid grid-flow-row gap-6\">\n    <div class=\"grid grid-flow-row gap-2\">\n      <Textfield bind:value={$data.name} label=\"Name\" required />\n      <ValidationMessage for=\"name\" let:messages={message}>\n        <span class=\"validation-message\">{message || ''}</span>\n      </ValidationMessage>\n    </div>\n\n    <div class=\"grid grid-flow-row gap-2\">\n      <Textfield bind:value={$data.mod_reference} label=\"Mod Reference\" required disabled={editing}>\n        <HelperText persistent={!editing} slot=\"helper\">\n          {#if !editing}\n            Warning! You will not be able to change this after creating the mod! Please ensure this is a unique modifier\n            that closely matches the name of your mod!\n          {/if}\n        </HelperText>\n      </Textfield>\n      <ValidationMessage for=\"mod_reference\" let:messages={message}>\n        <span class=\"validation-message\">{message || ''}</span>\n      </ValidationMessage>\n    </div>\n\n    <div class=\"grid grid-flow-row gap-2\">\n      <Textfield bind:value={$data.short_description} label=\"Short Description\" required />\n      <ValidationMessage for=\"short_description\" let:messages={message}>\n        <span class=\"validation-message\">{message || ''}</span>\n      </ValidationMessage>\n    </div>\n\n    <div class=\"grid gap-6 split\">\n      <div class=\"grid grid-flow-row gap-2 auto-rows-max\">\n        <Textfield\n          textarea\n          class=\"vertical-textarea\"\n          bind:value={$data.full_description}\n          label=\"Full Description\"\n          required\n          input$rows={10}\n        />\n        <ValidationMessage for=\"full_description\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n      <div class=\"grid grid-flow-row gap-2 auto-rows-max\">\n        <span>Preview:</span>\n        {#await markdown(preview) then previewRendered}\n          <div class=\"markdown-content right\">{@html previewRendered}</div>\n        {/await}\n      </div>\n    </div>\n\n    <div class=\"grid grid-flow-row gap-2\">\n      <label for=\"logo\">Logo:</label>\n      <input\n        id=\"logo\"\n        class=\"base-input\"\n        name=\"logo\"\n        type=\"file\"\n        accept=\"image/png,image/jpeg,image/gif\"\n        placeholder=\"Logo\"\n      />\n      <ValidationMessage for=\"logo\" let:messages={message}>\n        <span class=\"validation-message\">{message || ''}</span>\n      </ValidationMessage>\n    </div>\n\n    <div class=\"grid grid-flow-row gap-2\">\n      <Textfield bind:value={$data.source_url} label=\"Source URL\" />\n      <ValidationMessage for=\"source_url\" let:messages={message}>\n        <span class=\"validation-message\">{message || ''}</span>\n      </ValidationMessage>\n    </div>\n\n    {#if editing}\n      <div class=\"grid grid-flow-row gap-2\">\n        <div class=\"flex items-baseline\">\n          <h4 class=\"mr-4\">Authors</h4>\n          <Button type=\"button\" on:click={addAuthor}>\n            <Label>Add</Label>\n          </Button>\n        </div>\n        {#each $data.authors as author, i}\n          <div class=\"flex items-baseline\">\n            {#if $data.authors[i].user_id}\n              <ModAuthor id={$data.authors[i].user_id} />\n            {/if}\n            <Textfield\n              bind:value={$data.authors[i].user_id}\n              label=\"User ID\"\n              class=\"mr-4 w-full\"\n              disabled={author.role === 'creator'}\n            />\n            {#if author.role !== 'creator'}\n              <Button type=\"button\" on:click={() => removeAuthor(i)} variant=\"raised\">\n                <Label>Remove</Label>\n              </Button>\n            {/if}\n          </div>\n        {/each}\n      </div>\n    {/if}\n\n    <div>\n      <Button variant=\"outlined\" type=\"submit\">{submitText}</Button>\n    </div>\n  </div>\n</form>\n\n<style lang=\"postcss\">\n  .split {\n    grid-template-columns: 50% 50%;\n\n    & .right {\n      max-height: 75vh;\n      overflow: auto;\n    }\n  }\n</style>\n"],"names":["zod.object","zod.string","zod.optional","zod.any","zod.literal","createForm","validator"],"mappings":"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"}